@page "/export-excel"

@using MobileRepair.Interfaces

@rendermode InteractiveServer

@inject IExportService ExportService
@inject NavigationManager Navigation

<h3>Экспорт данных</h3>

<div class="mb-3">
    <label for="dataType">Тип данных для экспорта:</label>
    <select id="dataType" class="form-control" @bind="selectedDataType">
        <option value="Orders">Заказы</option>
        <option value="Devices">Устройства</option>
        <option value="Clients">Клиенты</option>
        <option value="OrderHistory">История заказов</option>
    </select>
</div>

<div class="mb-3">
    <label for="startDate">Начальная дата:</label>
    <input type="date" id="startDate" @bind="startDate" class="form-control" />
</div>

<div class="mb-3">
    <label for="endDate">Конечная дата:</label>
    <input type="date" id="endDate" class="form-control" @bind="endDate" />
</div>

<div class="mb-3">
    <label for="maxRecords">Максимальное количество записей:</label>
    <input type="number" id="maxRecords" class="form-control" @bind="maxRecords" />
</div>

<button class="btn btn-primary" @onclick="ExportData">Экспортировать</button>

@if (isExporting)
{
    <p>Экспорт данных...</p>
}

@code {
    private string selectedDataType = "Orders";
    private DateTime? startDate;
    private DateTime? endDate;
    private int? maxRecords;
    private bool isExporting;

    private async Task ExportData()
    {
        isExporting = true;

        try
        {
            byte[] fileBytes;

            switch (selectedDataType)
            {
                case "Orders":
                    fileBytes = await ExportService.ExportOrdersAsync(startDate, endDate, maxRecords);
                    break;
                case "Devices":
                    fileBytes = await ExportService.ExportDevicesAsync(startDate, endDate, maxRecords);
                    break;
                case "Clients":
                    fileBytes = await ExportService.ExportClientsAsync(maxRecords);
                    break;
                case "OrderHistory":
                    fileBytes = await ExportService.ExportOrderHistoryAsync(startDate, endDate, maxRecords);
                    break;
                default:
                    throw new InvalidOperationException("Неизвестный тип данных.");
            }

            var fileName = $"{selectedDataType}_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
            using var stream = new MemoryStream(fileBytes);

            var fileContent = new byte[stream.Length];
            stream.Position = 0;
            stream.Read(fileContent, 0, fileContent.Length);

            var base64 = Convert.ToBase64String(fileContent);
            var link = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{base64}";

            Navigation.NavigateTo(link);
        }
        catch (Exception ex)
        {
            
        }
        finally
        {
            isExporting = false;
        }
    }
}