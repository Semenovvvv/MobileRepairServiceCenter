@page "/import-excel"
@attribute [Authorize(Policy = "AdminOnly")]

@using System.IO
@using Bogus
@using ClosedXML.Excel
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using MobileRepair.Data
@using MobileRepair.Data.Models
@using MobileRepair.Interfaces
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment

@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IUserService userService

<h2>Импорт данных</h2>
<hr />

<p>@statusMessage</p>

<div>
    <h4>Выберите тип данных для импорта:</h4>
    <select @bind="selectedType" class="form-select mb-3">
        <option value="Users">Пользователи</option>
        <option value="Devices">Устройства</option>
    </select>

    <h4>Загрузите файл Excel:</h4>
    <InputFile OnChange="OnFileSelected" accept=".xlsx" multiple="false"></InputFile>

    <button class="btn btn-secondary mt-3" @onclick="GenerateTestFile">Скачать тестовый файл</button>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <p class="mt-3">@message</p>
}

@code {
    private string selectedType = "Users";
    private string statusMessage;
    private IBrowserFile? uploadedFile;
    private bool fileReady = false;
    private string message = "";

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null)
            {
                statusMessage = "Файл не выбран.";
                return;
            }

            await using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            using var workbook = new XLWorkbook(memoryStream);
            var worksheet = workbook.Worksheet(1);

            if (selectedType == "Users")
            {
                await ImportUsers(worksheet);
            }
            else if (selectedType == "Devices")
            {
                await ImportDevices(worksheet);
            }

            statusMessage = "Данные успешно загружены!";
        }
        catch (Exception ex)
        {
            statusMessage = $"Ошибка при загрузке данных: {ex.Message}";
            Console.WriteLine($"Ошибка: {ex}");
        }
    }

    private async Task ImportUsers(IXLWorksheet worksheet)
    {
        await using var dbContext = await DbFactory.CreateDbContextAsync();

        foreach (var row in worksheet.RowsUsed().Skip(1))
        {
            var user = new ApplicationUser
                {
                    Surname = row.Cell(1).GetValue<string>(),
                    Name = row.Cell(2).GetValue<string>(),
                    Patronymic = row.Cell(3).GetValue<string>(),
                    Email = row.Cell(4).GetValue<string>(),
                    PhoneNumber = row.Cell(5).GetValue<string>(),
                    UserName = row.Cell(4).GetValue<string>()
                };

            var password = row.Cell(6).GetValue<string>();

            if (!dbContext.Users.Any(u => u.Email == user.Email))
            {
                var result = await userService.RegisterClient(user, password);
                if (!result.Succeeded)
                {
                    statusMessage = $"Ошибка при регистрации пользователя {user.Email}: {string.Join(", ", result.Errors)}";
                    return;
                }
            }
        }

        statusMessage = "Пользователи успешно зарегистрированы!";
    }

    private async Task ImportDevices(IXLWorksheet worksheet)
    {
        using var dbContext = DbFactory.CreateDbContext();

        foreach (var row in worksheet.RowsUsed().Skip(1))
        {
            var device = new Device
                {
                    Manufacturer = row.Cell(1).GetValue<string>(),
                    Model = row.Cell(2).GetValue<string>(),
                    Type = row.Cell(3).GetValue<string>(),
                };

            if (!dbContext.Devices.Any(d => d.Manufacturer == device.Manufacturer && d.Model == device.Model))
            {
                dbContext.Devices.Add(device);
            }
        }

        await dbContext.SaveChangesAsync();
    }

    private List<ApplicationUser> GenerateRealisticUsers(int count)
    {
        var userFaker = new Faker<ApplicationUser>("ru")
            .RuleFor(u => u.Surname, f => f.Name.LastName())
            .RuleFor(u => u.Name, f => f.Name.FirstName())
            .RuleFor(u => u.Patronymic, f => f.Name.Suffix())
            .RuleFor(u => u.Email, (f, u) => f.Internet.Email(u.Name, u.Surname))
            .RuleFor(u => u.PhoneNumber, f => f.Phone.PhoneNumber("+7##########"))
            .RuleFor(u => u.UserName, (f, u) => u.Email);

        return userFaker.Generate(count);
    }

    private void GenerateTestExcel(string filePath)
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Users");

        // Заголовки
        worksheet.Cell(1, 1).Value = "Фамилия";
        worksheet.Cell(1, 2).Value = "Имя";
        worksheet.Cell(1, 3).Value = "Отчество";
        worksheet.Cell(1, 4).Value = "Email";
        worksheet.Cell(1, 5).Value = "Телефон";
        worksheet.Cell(1, 6).Value = "Пароль";

        // Генерация данных
        var users = GenerateRealisticUsers(40);
        for (int i = 0; i < users.Count; i++)
        {
            var user = users[i];
            worksheet.Cell(i + 2, 1).Value = user.Surname;
            worksheet.Cell(i + 2, 2).Value = user.Name;
            worksheet.Cell(i + 2, 3).Value = user.Patronymic;
            worksheet.Cell(i + 2, 4).Value = user.Email;
            worksheet.Cell(i + 2, 5).Value = user.PhoneNumber;
            worksheet.Cell(i + 2, 6).Value = "Pass1.";
        }

        workbook.SaveAs(filePath);
    }

    private async Task GenerateTestFile()
    {
        var fileName = "TestUsers.xlsx";
        var filePath = Path.Combine(Environment.WebRootPath, fileName);
        GenerateTestExcel(filePath);
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName);
    }
}