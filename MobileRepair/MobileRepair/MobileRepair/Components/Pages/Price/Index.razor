@page "/price"
@attribute [Authorize(Policy = "Client")]

@rendermode InteractiveServer

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using MobileRepair.Components.Layout
@using MobileRepair.Data


<div class="top-row px-4">
    <h2>Услуги</h2>
    <hr/>
    <AuthorizeView Policy="AdminOnly">
        <Authorized>
            <button class="btn btn-primary mb-3" @onclick="NavigateToCreate">Добавить</button>
        </Authorized>
    </AuthorizeView>
    
</div>


<div class="service-container">
    <table class="service-table">
        <thead>
        <tr>
            <th>Услуга</th>
            <th>Описание</th>
            <th>Время</th>
            <th>Стоимость</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var service in DbFactory.CreateDbContext().Services)
        {
            <tr>
                <td>@service.Name</td>
                <td>@service.Description</td>
                <td>@service.BaseDuration</td>
                <td>
                    @if (service.BasePrice == 0)
                    {
                        <span class="free-price">Бесплатно</span>
                    }
                    else
                    {
                        @($"{service.BasePrice:C}")
                    }
                </td>
                
                <AuthorizeView Policy="AdminOnly">
                    <Authorized>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => EditService(service.Id)">Изменить</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteService(service.Id)">Удалить</button>
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
</div>



<style>
    .service-container {
        max-width: 80%; /* Устанавливаем ширину формы на 80% */
        margin: auto;
        font-family: Arial, sans-serif;
    }

    .service-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

        .service-table th, .service-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .service-table th {
            background-color: #f5f5f5;
            font-weight: bold;
        }

    .free-price {
        color: #ff9900;
        font-weight: bold;
    }

    .order-button {
        background-color: #28a745;
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 8px 16px;
        cursor: pointer;
    }

        .order-button:hover {
            background-color: #218838;
        }
</style>

@code {
    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override void OnInitialized()
    {
        
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("price/create");
    }

    private void EditService(int serviceId)
    {
        Navigation.NavigateTo($"price/edit/{serviceId}");
    }

    private async Task DeleteService(int serviceId)
    {
        await using var dbContext = await DbFactory.CreateDbContextAsync();
        var service = await dbContext.Services.FindAsync(serviceId);
        if (service != null)
        {
            dbContext.Services.Remove(service);
            await dbContext.SaveChangesAsync();
        }

        Navigation.NavigateTo("price", forceLoad: true);
    }

}
