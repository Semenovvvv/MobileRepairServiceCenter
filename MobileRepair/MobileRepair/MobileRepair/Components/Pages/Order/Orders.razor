@page "/orders"
@attribute [Authorize(Policy = "Client")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using MobileRepair.Data
@using MobileRepair.Data.Models

@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2>Список заявок на ремонт</h2>
<hr/>

<button class="btn btn-primary mb-3" @onclick="NavigateToOrderPage">Заказать ремонт</button>

@if (isLoading)
{
    <p>Загрузка...</p>
}
else if (userOrders == null || !userOrders.Any())
{
    <p>Заявки отсутствуют.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Устройство</th>
                <th>Описание проблемы</th>
                <th>Статус</th>
                <th>Дата создания</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in userOrders)
            {
                <tr>
                    <td>@order.Device.Manufacturer @order.Device.Model</td>
                    <td>@order.Descryption</td>
                    <td>@order.Status</td>
                    <td>@order.DateBy.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => NavigateToOrderDetails(order.Id)">Детали</button>
                    </td>
                    @switch (order.IsPaid)
                    {
                        case false:
                            <button class="btn btn-success" @onclick="() => PayForOrder(order.Id)">Оплатить</button>
                            break;
                        case true:
                            <p class="text-success">Оплачено</p>
                            break;
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ApplicationUser CurrentUser;
    private List<Order>? userOrders;
    private bool isLoading = true;
    private int currentUserId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                currentUserId = int.Parse(user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value);
                await LoadUserOrders();
            }
        }
        catch (Exception ex)
        {
            
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserOrders()
    {
        try
        {
            // Загрузка данных для текущего пользователя
            using var dbContext = DbFactory.CreateDbContext();
            userOrders = await dbContext.Orders
                .Where(x => x.Device.Client.Id == currentUserId)
                .ToListAsync();
        }
        catch (Exception ex)
        {
        }
    }

    private void NavigateToOrderPage()
    {
        Navigation.NavigateTo("/create-order");
    }

    private async Task PayForOrder(int orderId)
    {
        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();

            var order = await dbContext.Orders
                .FirstOrDefaultAsync(o => o.Id == orderId);

            if (order == null)
            {
                return;
            }

            if (order.IsPaid)
            {
                return;
            }

            var payment = new Payment
            {
                OrderId = order.Id,
                PaymentDate = DateTime.Now,
                PaymentMethod = "Онлайн",
                Price = order.Price
            };

            dbContext.Payments.Add(payment);
            order.Status = "Оплачено";
            order.IsPaid = true;

            await dbContext.SaveChangesAsync();

            // await using (var transaction = await dbContext.Database.BeginTransactionAsync())
            // {
                

            //     await transaction.CommitAsync();
            // }
            Navigation.Refresh();
            //await LoadUserOrders();
        }
        catch
        {
            // ignored
        }
    }

    private void NavigateToOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"/orders/{orderId}");
    }
}
